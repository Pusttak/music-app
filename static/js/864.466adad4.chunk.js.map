{"version":3,"file":"static/js/864.466adad4.chunk.js","mappings":"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","sources":["webpack://playcloud/./src/components/Playlist/Playlist.module.scss?8687","components/Playlist/Playlist.jsx","webpack://playcloud/./src/pages/TrackPage/TrackPage.module.scss?3463","pages/TrackPage/TrackPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Playlist_title__KAkgU\",\"listItem\":\"Playlist_listItem__1zPhg\",\"active\":\"Playlist_active__1IlUz\",\"playIconBox\":\"Playlist_playIconBox__S8SoI\",\"trackNumber\":\"Playlist_trackNumber__leccm\",\"imageWrapper\":\"Playlist_imageWrapper__2J34M\",\"trackDataWrapper\":\"Playlist_trackDataWrapper__OUOcO\",\"trackName\":\"Playlist_trackName__jGUAu\",\"trackArtist\":\"Playlist_trackArtist__W7WPe\",\"trackDuration\":\"Playlist_trackDuration__nX+Wj\",\"trackLike\":\"Playlist_trackLike__qeAkD\"};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { useSearchMusicQuery } from 'redux/music/services/audio-api';\nimport { addPlaylist } from 'redux/music/music-slice';\nimport { currentTrackSelector } from 'redux/music/music-selectors';\nimport { isPlayingSelector } from 'redux/player/player-selectors';\nimport { PlayIcon2, PauseIcon, HeartIcon, HeartEmptyIcon } from 'icons';\nimport s from './Playlist.module.scss';\n\nconst Playlist = ({ artist, onLikesList, onTrackIsLIkes, onPlay }) => {\n  const currentTrackId = useSelector(currentTrackSelector);\n  const isPlaying = useSelector(isPlayingSelector);\n  const { data } = useSearchMusicQuery(artist, { skip: !artist });\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (data) {\n      const playlist = data?.tracks?.hits.map(({ track }) => track.key);\n      dispatch(addPlaylist(playlist));\n    }\n  }, [dispatch, data]);\n\n  return (\n    data && (\n      <>\n        <h2 className={s.title}>Shows you may like</h2>\n        <ul className={s.playlist}>\n          {data?.tracks?.hits.map(({ track: { images, title, subtitle, key: trackId, artists } }, idx) => {\n            return (\n              <li className={currentTrackId === trackId ? [s.listItem, s.active].join(' ') : s.listItem} key={idx}>\n                <div className={s.playIconBox} onClick={() => onPlay(trackId)}>\n                  {currentTrackId !== trackId ? (\n                    <PlayIcon2 size={16} color=\"white\" />\n                  ) : isPlaying ? (\n                    <PauseIcon size={16} color=\"#6e32ff\" />\n                  ) : (\n                    <PlayIcon2 size={16} color=\"#6e32ff\" />\n                  )}\n                </div>\n                <span className={s.trackNumber}>{idx + 1}</span>\n                <Link to={`/tracks/${trackId}`}>\n                  <div className={s.imageWrapper}>\n                    <img src={images.coverart} alt={subtitle} />\n                  </div>\n                </Link>\n                <div className={s.trackDataWrapper}>\n                  <div className={s.trackName}>\n                    <Link to={`/tracks/${trackId}`}>{title}</Link>\n                  </div>\n                  <span className={s.trackArtist}>{subtitle}</span>\n                  <span className={s.trackDuration}>{'01:29'}</span>\n                  <div\n                    className={s.trackLike}\n                    onClick={() =>\n                      onLikesList({\n                        key: trackId,\n                        title,\n                        subtitle,\n                        images,\n                        artists,\n                      })\n                    }\n                  >\n                    {onTrackIsLIkes(trackId) ? <HeartIcon size={18} color=\"#6e32ff\" /> : <HeartEmptyIcon size={18} />}\n                  </div>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n      </>\n    )\n  );\n};\n\nexport default Playlist;\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"TrackPage_header__OiRbp\",\"headerBg\":\"TrackPage_headerBg__dxxhp\",\"title\":\"TrackPage_title__fSisq\",\"track\":\"TrackPage_track__HNz29\",\"artist\":\"TrackPage_artist__trlzO\",\"artistImg\":\"TrackPage_artistImg__oVU4t\",\"imgWrapper\":\"TrackPage_imgWrapper__Gua1e\",\"buttonsBar\":\"TrackPage_buttonsBar__LTW+c\",\"button\":\"TrackPage_button__dsBL4\",\"buttonActive\":\"TrackPage_buttonActive__4EwV4\"};","import { useCallback, useEffect, useRef } from 'react';\nimport { useParams, useOutletContext } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { currentTrack, addToLikesList, removeFromLikesList } from 'redux/music/music-slice';\nimport { useGetTrackByIdQuery } from 'redux/music/services/audio-api';\nimport { likesListSelector, currentTrackSelector } from 'redux/music/music-selectors';\nimport { isPlayingSelector } from 'redux/player/player-selectors';\nimport Playlist from 'components/Playlist';\nimport { PlayIcon2, PauseIcon, HeartIcon } from 'icons';\nimport { useError } from 'hooks';\nimport { Astronaut } from 'components/Loader';\nimport s from './TrackPage.module.scss';\n\nconst TrackPage = () => {\n  const { trackId } = useParams();\n  const { play } = useOutletContext();\n  const likeList = useSelector(likesListSelector);\n  const stateCurrentTrack = useSelector(currentTrackSelector);\n  const isPlaying = useSelector(isPlayingSelector);\n  const dispatch = useDispatch();\n  const ref = useRef();\n  const { data, error, isError, isLoading } = useGetTrackByIdQuery(trackId, {\n    skip: !trackId,\n  });\n  useError(error);\n\n  useEffect(() => {\n    if (data) {\n      ref.current?.scrollIntoView({ block: 'center', behavior: 'smooth' });\n    }\n  }, [data, trackId]);\n\n  const trackIsLIkes = useCallback(\n    id => {\n      return likeList.some(track => track.key === id);\n    },\n    [likeList]\n  );\n\n  const hadleClickLikesList = track => {\n    trackIsLIkes(track.key) ? dispatch(removeFromLikesList(track.key)) : dispatch(addToLikesList(track));\n  };\n\n  const handleButtonPlayClick = trackId => {\n    if (trackId !== stateCurrentTrack) {\n      dispatch(currentTrack(trackId));\n      return;\n    }\n    if (trackId === stateCurrentTrack) {\n      play();\n      return;\n    }\n  };\n\n  return !isError && isLoading ? (\n    <Astronaut size={350} style={{ margin: '0 auto' }} />\n  ) : (\n    data && (\n      <>\n        <div\n          ref={ref}\n          className={s.header}\n          style={{\n            backgroundImage: `url(${data.images.coverart})`,\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundSize: 'cover',\n          }}\n        >\n          <div\n            className={s.headerBg}\n            style={{\n              backgroundImage: `url(${data.images.coverart})`,\n              backgroundRepeat: 'no-repeat',\n              backgroundPosition: 'center top 30%',\n              backgroundSize: '220px',\n            }}\n          >\n            <div className={s.title}>\n              <span className={s.track}>{data.title}</span>\n              <span className={s.artist}>{data.subtitle}</span>\n            </div>\n            <div className={s.buttonsBar}>\n              <div className={s.button} onClick={() => handleButtonPlayClick(trackId)}>\n                {isPlaying && trackId === stateCurrentTrack ? <PauseIcon size=\"22\" strokeWidth=\"6\" /> : <PlayIcon2 />}\n                Play\n              </div>\n              <div\n                className={trackIsLIkes(trackId) ? [s.button, s.buttonActive].join(' ') : s.button}\n                onClick={() =>\n                  hadleClickLikesList({\n                    key: data.key,\n                    title: data.title,\n                    subtitle: data.subtitle,\n                    images: data.images,\n                    artists: data.artist,\n                  })\n                }\n              >\n                {trackIsLIkes(trackId) ? <HeartIcon color=\"white\" /> : <HeartIcon />}\n                Like\n              </div>\n            </div>\n            <div className={s.artistImg}>\n              <div className={s.imgWrapper}>\n                <img src={data.images.background} alt={data.subtitle} />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className={s.trackList}></div>\n        <Playlist\n          artist={data.subtitle}\n          onLikesList={hadleClickLikesList}\n          onTrackIsLIkes={trackIsLIkes}\n          onPlay={handleButtonPlayClick}\n        />\n      </>\n    )\n  );\n};\n\nexport default TrackPage;\n"],"names":["artist","onLikesList","onTrackIsLIkes","onPlay","currentTrackId","useSelector","currentTrackSelector","isPlaying","isPlayingSelector","data","useSearchMusicQuery","skip","dispatch","useDispatch","useEffect","playlist","tracks","hits","map","track","key","addPlaylist","className","s","idx","images","title","subtitle","trackId","artists","join","onClick","size","color","to","src","coverart","alt","useParams","play","useOutletContext","likeList","likesListSelector","stateCurrentTrack","ref","useRef","useGetTrackByIdQuery","error","isError","isLoading","useError","current","scrollIntoView","block","behavior","trackIsLIkes","useCallback","id","some","hadleClickLikesList","removeFromLikesList","addToLikesList","handleButtonPlayClick","currentTrack","style","margin","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","strokeWidth","background"],"sourceRoot":""}