{"version":3,"file":"static/js/81.c3ec7976.chunk.js","mappings":"wJACA,GAAgB,KAAO,6B,UCcvB,EAZsB,SAAC,GAA0B,IAAxBA,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OACjC,OACE,eAAIC,UAAWC,EAAAA,KAAf,SACGH,EAASI,KAAI,SAACC,EAAOC,GAAR,OACZ,eAAcJ,UAAWC,EAAAA,KAAzB,UACE,SAACI,EAAA,EAAD,CAAWF,MAAOA,EAAOJ,OAAQA,KAD1BK,U,oHCNjB,EAAuB,wBAAvB,EAAsD,wBAAtD,EAAyF,4BAAzF,EAAgI,4BAAhI,EAAoK,yBAApK,EAAwM,4B,UC6CxM,EArCkB,SAAC,GAA2E,IAAD,MAAxED,MAAcG,EAA0D,EAA/DC,IAAcC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,QAAWZ,EAAa,EAAbA,OACxEa,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAiBF,EAAAA,EAAAA,IAAYG,EAAAA,IAC7BC,GAAWC,EAAAA,EAAAA,MAEXC,EAAO,OAAGR,QAAH,IAAGA,GAAH,UAAGA,EAAU,UAAb,aAAG,EAAcS,OAa9B,OACE,iBAAKpB,UAAWC,EAAhB,WACE,UAAC,KAAD,CAAMoB,GAAE,kBAAaf,GAAWN,UAAWC,EAA3C,WACE,gBAAKD,UAAWC,EAAhB,UACE,gBAAKqB,IAAG,OAAEZ,QAAF,IAAEA,OAAF,EAAEA,EAAQa,SAAUC,IAAKf,OAEnC,cAAGT,UAAWC,EAAd,SAAwBO,QAE1B,gBAAKR,UAAWC,EAAYwB,QAAS,kBAnBX,SAAAnB,GACxBA,IAAYS,EAIZT,IAAYS,GACdhB,IAJAkB,GAASS,EAAAA,EAAAA,IAAapB,IAiBqBqB,CAAsBrB,IAAjE,SACGM,GAAaN,IAAYS,GAAiB,SAAC,KAAD,CAAWa,KAAM,MAAS,SAAC,KAAD,CAAUA,KAAM,QAGvF,SAAC,KAAD,CAAMP,GAAE,mBAAcF,GAAtB,UACE,cAAGnB,UAAWC,EAAd,SAA2BQ,W,gHChBnC,UAfe,WACb,IAAQoB,GAAUhB,EAAAA,EAAAA,IAAYiB,EAAAA,IAAtBD,MACAE,GAASC,EAAAA,EAAAA,MAATD,KACR,GAA4CE,EAAAA,EAAAA,IAA0BJ,EAAO,CAC3EK,MAAOL,IADDM,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,UAK9B,OAFAC,EAAAA,EAAAA,IAASF,IAEDD,GAAWE,GACjB,SAAC,KAAD,CAAWV,KAAM,IAAKY,MAAO,CAAEC,OAAQ,YAEvCN,IAAQ,SAAC,IAAD,CAAerC,SAAUqC,EAAMpC,OAAQgC","sources":["webpack://music-app/./src/components/MainTrackList/MainTrackList.module.scss?7956","components/MainTrackList/MainTrackList.jsx","webpack://music-app/./src/components/TrackCard/TrackCard.module.scss?1c8b","components/TrackCard/TrackCard.jsx","pages/Charts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MainTrackList_list__BeFvD\"};","import TrackCard from 'components/TrackCard';\nimport s from './MainTrackList.module.scss';\n\nconst MainTrackList = ({ dataList, onPlay }) => {\n  return (\n    <ul className={s.list}>\n      {dataList.map((track, idx) => (\n        <li key={idx} className={s.item}>\n          <TrackCard track={track} onPlay={onPlay} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MainTrackList;\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"TrackCard_card__u0rZs\",\"link\":\"TrackCard_link__HD5bn\",\"playIcon\":\"TrackCard_playIcon__W+6pF\",\"coverart\":\"TrackCard_coverart__8QKKx\",\"title\":\"TrackCard_title__PC7to\",\"subtitle\":\"TrackCard_subtitle__safku\"};","import { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { currentTrack } from 'redux/music/music-slice';\nimport { currentTrackSelector } from 'redux/music/music-selectors';\nimport { isPlayingSelector } from 'redux/player/player-selectors';\nimport { PlayIcon, PauseIcon } from 'icons';\nimport s from './TrackCard.module.scss';\n\nconst TrackCard = ({ track: { key: trackId, title, subtitle, images, artists }, onPlay }) => {\n  const isPlaying = useSelector(isPlayingSelector);\n  const currentTrackId = useSelector(currentTrackSelector);\n  const dispatch = useDispatch();\n\n  const aristId = artists?.[0]?.adamid;\n\n  const handleButtonPlayClick = trackId => {\n    if (trackId !== currentTrackId) {\n      dispatch(currentTrack(trackId));\n      return;\n    }\n    if (trackId === currentTrackId) {\n      onPlay();\n      return;\n    }\n  };\n\n  return (\n    <div className={s.card}>\n      <Link to={`/tracks/${trackId}`} className={s.link}>\n        <div className={s.coverart}>\n          <img src={images?.coverart} alt={subtitle} />\n        </div>\n        <p className={s.title}>{title}</p>\n      </Link>\n      <div className={s.playIcon} onClick={() => handleButtonPlayClick(trackId)}>\n        {isPlaying && trackId === currentTrackId ? <PauseIcon size={16} /> : <PlayIcon size={16} />}\n      </div>\n\n      <Link to={`/artists/${aristId}`}>\n        <p className={s.subtitle}>{subtitle}</p>\n      </Link>\n    </div>\n  );\n};\n\nexport default TrackCard;\n","import { useSelector } from 'react-redux';\nimport { useOutletContext } from 'react-router-dom';\n\nimport { useGetChartByCountryQuery } from 'redux/music/services/audio-api';\nimport { currentCountrySelector } from 'redux/music/music-selectors';\nimport { Astronaut } from 'components/Loader';\nimport { useError } from 'hooks';\nimport MainTrackList from 'components/MainTrackList';\n\nconst Charts = () => {\n  const { value } = useSelector(currentCountrySelector);\n  const { play } = useOutletContext();\n  const { data, isError, error, isLoading } = useGetChartByCountryQuery(value, {\n    skip: !value,\n  });\n  useError(error);\n\n  return !isError && isLoading ? (\n    <Astronaut size={350} style={{ margin: '0 auto' }} />\n  ) : (\n    data && <MainTrackList dataList={data} onPlay={play} />\n  );\n};\n\nexport default Charts;\n"],"names":["dataList","onPlay","className","s","map","track","idx","TrackCard","trackId","key","title","subtitle","images","artists","isPlaying","useSelector","isPlayingSelector","currentTrackId","currentTrackSelector","dispatch","useDispatch","aristId","adamid","to","src","coverart","alt","onClick","currentTrack","handleButtonPlayClick","size","value","currentCountrySelector","play","useOutletContext","useGetChartByCountryQuery","skip","data","isError","error","isLoading","useError","style","margin"],"sourceRoot":""}